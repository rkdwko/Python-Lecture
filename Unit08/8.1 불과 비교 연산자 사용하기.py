## 8.1 불과 비교 연산자 사용하기
# 불은 True, False로 표현하며 1, 3.6, 'Python'처럼 값의 일종입니다.

>>> True
True
>>> False
False

## 8.1.1 비교 연산자의 판단 결과
# 파이썬에서는 비교 연산자와 논리 연산자의 판단 결과로 True, False를 사용합니다.
# 즉, 비교 결과가 맞으면 True, 아니면 False입니다.

>>> 3 > 1
True

# 부등호 >로 두 숫자를 비교했습니다. 3이 1보다 크니까 맞는 식이죠?
# 그래서 결과는 참이고 True가 나옵니다.

## 8.1.2 숫자가 같은지 다른지 비교하기
# 이제 두 숫자가 같은지 또는 다른지 비교해보겠습니다.
# 두 숫자가 같은지 비교할 때는 ==(equal), 다른지 비교할 때는 !=(not equal)을 사용합니다.

>>> 10 == 10    # 10과 10이 같은지 비교
True
>>> 10 != 5     # 10과 5가 다른지 비교
True

# 10과 10은 같으므로 True, 10과 5는 다르므로 True가 나옵니다. 파이썬에서 두 값이 같은지 비교할 때는
# =이 아닌 ==을 사용합니다. 왜냐하면 =은 할당 연산자로 이미 사용되고 있기 때문입니다.

## 8.1.3 문자열이 같은지 다른지 비교하기
# 숫자뿐만 아니라 문자열도 ==와 != 연산자로 비교할 수 있습니다. 이때 문자열은 비교할 때 대소문자를 구분합니다.
# 다음과 같이 단어가 같아도 대소문자가 다르면 다른 문자열로 판단합니다.

>>> 'Python' == 'Python'
True
>>> 'Python' == 'python'
False
>>> 'Python' != 'python'
True

## 8.1.4 부등호 사용하기
# 부등호는 수학 시간에 배운 내용과 같습니다. 큰지, 작은지, 크거나 같은지, 작거나 같은지를 판단해봅니다.

>>> 10 > 20    # 10이 20보다 큰지 비교
False
>>> 10 < 20    # 10이 20보다 작은지 비교
True
>>> 10 >= 10    # 10이 10보다 크거나 같은지 비교
True
>>> 10 <= 10    # 10이 10보다 작거나 같은지 비교
True

# 여기서 비교 기준은 첫 번째 값입니다. 따라서 첫 번째 값보다 큰지, 작은지처럼 읽습니다. 항상 이점을 기억해두세요.
# 특히 부등호를 말로 설명할 때 >은 초과, <은 미만, >=은 이상, <=은 이하라고도 합니다.
# 그리고 >, <은 비교할 값과 같으면 무조건 거짓입니다. 하지만 >=, <=은 비교할 값과 같으면
# 참입니다. 따라서 이상, 이하는 비교할 값도 포함된다는 점이 중요합니다.

## 8.1.5 객체가 같은지 다른지 비교하기
# 이번에는 is와 is not입니다. 같다는 ==, 다르다는 !=이 이미 있는데 왜 is, is not을 만들었을까요?
# is, is not도 같다, 다르다지만 ==, !=는 값 자체를 비교하고, is, is not은 객체(object)를 비교합니다.
# (객체에 대해서는 'Unit 34 클래스 사용하기'에서 자세히 설명하겠습니다).

>>> 1 == 1.0
True
>>> 1 is 1.0
False
>>> 1 is not 1.0
True

# 1과 1.0은 정수와 실수라는 차이점이 있지만 값은 같습니다. 따라서 ==로 비교해보면 True가 나옵니다.
# 하지만 1과 1.0을 is로 비교해보면 False가 나옵니다. 왜냐하면 1은 정수 객체, 1.0은 실수 객체이므로 두 객체는 서로 다르기 때문입니다.
# 물론 1과 1.0을 is not으로 비교하면 True가 나오겠죠?

## 참고 | 정수 객체와 실수 객체가 서로 다른 것은 어떻게 확인하나요?
# 정수 객체와 실수 객체가 서로 다른지 확인하려면 id 함수를 사용하면 됩니다.
# id는 객체의 고유한 값(메모리 주소)을 구합니다(이 값은 파이썬을 실행하는 동안에는 계속 유지되며 다시 실행하면 달라집니다).

>>> id(1)
1714767504
>>> id(1.0)
55320032

# 두 객체의 고유한 값이 다르므로 서로 다른 객체입니다.
# 그래서 1과 1.0을 is로 비교하면 False가 나옵니다. is, is not은 클래스로 객체를 만든 뒤에 객체가 서로 같은지 비교할 때 주로 사용합니다.
# 여기에 나오는 객체의 고유한 값(메모리 주소)에 대해서는 신경 쓸 필요 없습니다.
# ==, !=와 is, is not의 동작 방식이 다르다는 정도만 알아 두면 됩니다.

## 참고 | 값 비교에 is를 쓰지 않기
# 값을 비교할 때는 is를 사용하면 안 됩니다.
# 다음과 같이 변수 a에 -5를 할당한 뒤 a is -5를 실행하면 True가 나오지만 다시 -6을 할당한 뒤 a is -6을 실행하면 False가 나옵니다.

>>> a = -5
>>> a is -5
True
>>> a = -6
>>> a is -6
False

# 왜냐하면 변수 a가 있는 상태에서 다른 값을 할당하면 메모리 주소가 달라질 수 있기 때문입니다.
# 따라서 다른 객체가 되므로 값이 같더라도 is로 비교하면 False가 나옵니다. 값(숫자)를 비교할 때는 is가 아닌 비교 연산자를 사용해야 합니다.